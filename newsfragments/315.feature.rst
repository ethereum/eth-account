set_code_transaction for EIP-7702

### Overview
This feature introduces a new type of transaction, set_code_transaction, which enables the usage of EIP-7702. This transaction type allows users to set the code of a contract without deploying a new contract. This feature is useful for updating the code of a contract without changing its address or state.

    ### usage
    You need to get signed one or more signed authorizations from an EOA willing to have a smart contract code associated with the EOA, this the essence of EIP-7702
    an authorization is of this form:
    ```json
    {'chainId': 7072151312,
    'address':  b'>l\x95\xd8\x80@\x1eN6\xeeb\xf4\xeb\xde\xd3F\xe1\xad\xf4-',
    'nonce': 2,
    'yParity': 1,
    'r': 22595136657293516951860802422974352017713294017347016159649668416801694741909,
    's': 23624588567578401597292901415360791985725988995245670164012927046435484403948}
    ```
    where:
    - address is the address of the smart contract code to be associated with the EOA, the address format is bytes
    - nonce is the nonce of the EOA, it is used to prevent replay attacks
    the rest of the fields are the signature of the first 3 fields by the EOA

    Create the transaction as before, adding a new field named authorizationList, for instance:

    transaction_dict = {'authorizationList':[my_auth1, my_auth2], "to": some_address}


    ### signature of the authorization, example code using the convinience function:
    ```python
    #
    # you need to have the EOA private key, the EOA address and the code address
    # in variables named:
    # signer_EOA_private_key
    # code_address
    # and an instanciated web3 object named w3

    chain_id = w3.eth.chain_id
    signer_nonce = w3.eth.get_transaction_count(signer_EOA_address)

    w3.eth.account.sign_authorization(
                {
                'chainId': chain_id,
                'address': bytes.fromhex(code_address[2:]),
                'nonce': signer_nonce
                },
                signer_EOA_private_key)

    ```
